{
  "version": 3,
  "sources": ["../../@hugeicons/vue/src/components/HugeiconsIcon.vue", "../../@hugeicons/vue/dist/esm/_virtual/_plugin-vue_export-helper.js", "../../@hugeicons/vue/src/components/HugeiconsIcon.vue", "../../@hugeicons/vue/src/index.ts"],
  "sourcesContent": ["<template>\n  <svg\n    :width=\"computedSize\"\n    :height=\"computedSize\"\n    :viewBox=\"`0 0 24 24`\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    :color=\"color\"\n    v-bind=\"$attrs\"\n  >\n    <template v-for=\"(element, index) in currentIcon\" :key=\"index\">\n      <component\n        :is=\"element[0]\"\n        v-bind=\"transformAttrs(element[1], calculatedStrokeWidth)\"\n      />\n    </template>\n  </svg>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue';\n\nexport default defineComponent({\n  name: 'HugeiconsIcon',\n  inheritAttrs: false,\n  props: {\n    icon: {\n      type: Array as PropType<[string, Record<string, any>][]>,\n      required: true\n    },\n    size: {\n      type: [Number, String],\n      default: 24,\n      validator(value: number | string) {\n        const size = typeof value === 'string' ? parseInt(value, 10) : value;\n        return !isNaN(size) && size > 0;\n      }\n    },\n    strokeWidth: {\n      type: Number,\n      default: undefined\n    },\n    absoluteStrokeWidth: {\n      type: Boolean,\n      default: false\n    },\n    altIcon: {\n      type: Array as PropType<[string, Record<string, any>][]>,\n      default: undefined\n    },\n    showAlt: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: 'currentColor'\n    }\n  },\n  setup(props) {\n    const computedSize = computed(() => {\n      const size = typeof props.size === 'string' ? parseInt(props.size, 10) : props.size;\n      return !isNaN(size) && size > 0 ? size : 24;\n    });\n\n    const calculatedStrokeWidth = computed(() => {\n      if (props.strokeWidth === undefined) return undefined;\n      return props.absoluteStrokeWidth \n        ? (props.strokeWidth * 24) / computedSize.value \n        : props.strokeWidth;\n    });\n\n    const currentIcon = computed(() => {\n      return props.altIcon && props.showAlt ? props.altIcon : props.icon;\n    });\n\n    const transformAttrs = (attrs: Record<string, any>, strokeWidth?: number) => {\n      const result: Record<string, any> = {};\n      for (const [key, value] of Object.entries(attrs)) {\n        const kebabKey = key.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n        result[kebabKey] = value;\n      }\n\n      // Add stroke properties to child elements if strokeWidth is defined\n      if (strokeWidth !== undefined) {\n        result['stroke-width'] = strokeWidth;\n        result['stroke'] = 'currentColor';\n      }\n\n      return result;\n    };\n\n    return {\n      computedSize,\n      calculatedStrokeWidth,\n      transformAttrs,\n      currentIcon\n    };\n  }\n});\n</script> ", "var _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\n\nexport { _export_sfc as default };\n//# sourceMappingURL=_plugin-vue_export-helper.js.map\n", "<template>\n  <svg\n    :width=\"computedSize\"\n    :height=\"computedSize\"\n    :viewBox=\"`0 0 24 24`\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    :color=\"color\"\n    v-bind=\"$attrs\"\n  >\n    <template v-for=\"(element, index) in currentIcon\" :key=\"index\">\n      <component\n        :is=\"element[0]\"\n        v-bind=\"transformAttrs(element[1], calculatedStrokeWidth)\"\n      />\n    </template>\n  </svg>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue';\n\nexport default defineComponent({\n  name: 'HugeiconsIcon',\n  inheritAttrs: false,\n  props: {\n    icon: {\n      type: Array as PropType<[string, Record<string, any>][]>,\n      required: true\n    },\n    size: {\n      type: [Number, String],\n      default: 24,\n      validator(value: number | string) {\n        const size = typeof value === 'string' ? parseInt(value, 10) : value;\n        return !isNaN(size) && size > 0;\n      }\n    },\n    strokeWidth: {\n      type: Number,\n      default: undefined\n    },\n    absoluteStrokeWidth: {\n      type: Boolean,\n      default: false\n    },\n    altIcon: {\n      type: Array as PropType<[string, Record<string, any>][]>,\n      default: undefined\n    },\n    showAlt: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: 'currentColor'\n    }\n  },\n  setup(props) {\n    const computedSize = computed(() => {\n      const size = typeof props.size === 'string' ? parseInt(props.size, 10) : props.size;\n      return !isNaN(size) && size > 0 ? size : 24;\n    });\n\n    const calculatedStrokeWidth = computed(() => {\n      if (props.strokeWidth === undefined) return undefined;\n      return props.absoluteStrokeWidth \n        ? (props.strokeWidth * 24) / computedSize.value \n        : props.strokeWidth;\n    });\n\n    const currentIcon = computed(() => {\n      return props.altIcon && props.showAlt ? props.altIcon : props.icon;\n    });\n\n    const transformAttrs = (attrs: Record<string, any>, strokeWidth?: number) => {\n      const result: Record<string, any> = {};\n      for (const [key, value] of Object.entries(attrs)) {\n        const kebabKey = key.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n        result[kebabKey] = value;\n      }\n\n      // Add stroke properties to child elements if strokeWidth is defined\n      if (strokeWidth !== undefined) {\n        result['stroke-width'] = strokeWidth;\n        result['stroke'] = 'currentColor';\n      }\n\n      return result;\n    };\n\n    return {\n      computedSize,\n      calculatedStrokeWidth,\n      transformAttrs,\n      currentIcon\n    };\n  }\n});\n</script> ", "import type { App } from 'vue';\nimport HugeiconsIcon from './components/HugeiconsIcon.vue';\n\nexport { default as HugeiconsIcon } from './components/HugeiconsIcon.vue';\nexport * from './types';\n\nexport const HugeiconsPlugin = {\n  install: (app: App) => {\n    app.component('HugeiconsIcon', HugeiconsIcon);\n  }\n};\n\nexport default HugeiconsPlugin; "],
  "mappings": ";;;;;;;;;;;;;;AAsBA,IAAA,YAAe,gBAAgB;EAC7B,MAAM;EACN,cAAc;EACd,OAAO;IACL,MAAM;MACJ,MAAM;MACN,UAAU;;IAEZ,MAAM;MACJ,MAAM,CAAC,QAAQ,MAAM;MACrB,SAAS;MACT,UAAU,OAAwB;AAChC,cAAM,OAAO,OAAO,UAAU,WAAW,SAAS,OAAO,EAAE,IAAI;AAC/D,eAAO,CAAC,MAAM,IAAI,KAAK,OAAO;MAChC;;IAEF,aAAa;MACX,MAAM;MACN,SAAS;;IAEX,qBAAqB;MACnB,MAAM;MACN,SAAS;;IAEX,SAAS;MACP,MAAM;MACN,SAAS;;IAEX,SAAS;MACP,MAAM;MACN,SAAS;;IAEX,OAAO;MACL,MAAM;MACN,SAAS;IACX;;EAEF,MAAM,OAAO;AACX,UAAM,eAAe,SAAS,MAAM;AAClC,YAAM,OAAO,OAAO,MAAM,SAAS,WAAW,SAAS,MAAM,MAAM,EAAE,IAAI,MAAM;AAC/E,aAAO,CAAC,MAAM,IAAI,KAAK,OAAO,IAAI,OAAO;IAC3C,CAAC;AAED,UAAM,wBAAwB,SAAS,MAAM;AAC3C,UAAI,MAAM,gBAAgB,OAAW,QAAO;AAC5C,aAAO,MAAM,sBACR,MAAM,cAAc,KAAM,aAAa,QACxC,MAAM;IACZ,CAAC;AAED,UAAM,cAAc,SAAS,MAAM;AACjC,aAAO,MAAM,WAAW,MAAM,UAAU,MAAM,UAAU,MAAM;IAChE,CAAC;AAED,UAAM,iBAAiB,CAAC,OAA4B,gBAAyB;AAC3E,YAAM,SAA8B,CAAA;AACpC,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,KAAK,GAAG;AAChD,cAAM,WAAW,IAAI,QAAQ,sBAAsB,OAAO,EAAE,YAAW;AACvE,eAAO,QAAQ,IAAI;MACrB;AAGA,UAAI,gBAAgB,QAAW;AAC7B,eAAO,cAAc,IAAI;AACzB,eAAO,QAAQ,IAAI;MACrB;AAEA,aAAO;;AAGT,WAAO;MACL;MACA;MACA;MACA;;EAEJ;AACF,CAAC;;;ACnGD,IAAI,cAAc,CAAC,KAAK,UAAU;AAChC,QAAM,SAAS,IAAI,aAAa;AAChC,aAAW,CAAC,KAAK,GAAG,KAAK,OAAO;AAC9B,WAAO,GAAG,IAAI;AAAA,EAChB;AACA,SAAO;AACT;;;;ACJU,SAAA,YAAEA,MAAY,QAAA,QAAA,QAAA,OAAA,UAAA;AACb,SAAAC,UAAA,GAAcC,mBAAA,OAAAC,WAAA;IACpB,OAAO,KAAE;IACV,QAAM,KAAA;IACN,SAAK;IACJ,OAAOC;IACAC,MAAAA;IAAAA,OAAAA,KAAAA;;eAEgD,IAAK,GAAAH;MAAAI;MAAA;MAAAC,WAAA,KAAA,aAAA,CAAA,SAAA,UAAA;AAVjE,eAAAN,UAAA,GAAAO;UAAAC,wBAAA,QAAA,CAAA,CAAA;UAAAN,WAAA;YAagBO,KAAAA;YAAAA,SAAAA;UAbhB,GAAA,KAAA,eAAA,QAAA,CAAA,GAAA,KAAA,qBAAA,CAAA;UAAA;UAAA;;QAAA;MAAA,CAAA;;;;;;;;;ACMO,IAAM,kBAAkB;EAC7B,SAAS,CAAC,QAAa;AACrB,QAAI,UAAU,iBAAiB,aAAa;EAChD;AACA;",
  "names": ["computedSize", "_openBlock", "_createElementBlock", "_mergeProps", "color", "$attrs", "_Fragment", "_renderList", "_createBlock", "_resolveDynamicComponent", "transformAttrs"]
}
