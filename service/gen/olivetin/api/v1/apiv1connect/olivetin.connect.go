// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: olivetin/api/v1/olivetin.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/OliveTin/OliveTin/gen/olivetin/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OliveTinApiServiceName is the fully-qualified name of the OliveTinApiService service.
	OliveTinApiServiceName = "olivetin.api.v1.OliveTinApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OliveTinApiServiceGetDashboardProcedure is the fully-qualified name of the OliveTinApiService's
	// GetDashboard RPC.
	OliveTinApiServiceGetDashboardProcedure = "/olivetin.api.v1.OliveTinApiService/GetDashboard"
	// OliveTinApiServiceStartActionProcedure is the fully-qualified name of the OliveTinApiService's
	// StartAction RPC.
	OliveTinApiServiceStartActionProcedure = "/olivetin.api.v1.OliveTinApiService/StartAction"
	// OliveTinApiServiceStartActionAndWaitProcedure is the fully-qualified name of the
	// OliveTinApiService's StartActionAndWait RPC.
	OliveTinApiServiceStartActionAndWaitProcedure = "/olivetin.api.v1.OliveTinApiService/StartActionAndWait"
	// OliveTinApiServiceStartActionByGetProcedure is the fully-qualified name of the
	// OliveTinApiService's StartActionByGet RPC.
	OliveTinApiServiceStartActionByGetProcedure = "/olivetin.api.v1.OliveTinApiService/StartActionByGet"
	// OliveTinApiServiceStartActionByGetAndWaitProcedure is the fully-qualified name of the
	// OliveTinApiService's StartActionByGetAndWait RPC.
	OliveTinApiServiceStartActionByGetAndWaitProcedure = "/olivetin.api.v1.OliveTinApiService/StartActionByGetAndWait"
	// OliveTinApiServiceRestartActionProcedure is the fully-qualified name of the OliveTinApiService's
	// RestartAction RPC.
	OliveTinApiServiceRestartActionProcedure = "/olivetin.api.v1.OliveTinApiService/RestartAction"
	// OliveTinApiServiceKillActionProcedure is the fully-qualified name of the OliveTinApiService's
	// KillAction RPC.
	OliveTinApiServiceKillActionProcedure = "/olivetin.api.v1.OliveTinApiService/KillAction"
	// OliveTinApiServiceExecutionStatusProcedure is the fully-qualified name of the
	// OliveTinApiService's ExecutionStatus RPC.
	OliveTinApiServiceExecutionStatusProcedure = "/olivetin.api.v1.OliveTinApiService/ExecutionStatus"
	// OliveTinApiServiceGetLogsProcedure is the fully-qualified name of the OliveTinApiService's
	// GetLogs RPC.
	OliveTinApiServiceGetLogsProcedure = "/olivetin.api.v1.OliveTinApiService/GetLogs"
	// OliveTinApiServiceValidateArgumentTypeProcedure is the fully-qualified name of the
	// OliveTinApiService's ValidateArgumentType RPC.
	OliveTinApiServiceValidateArgumentTypeProcedure = "/olivetin.api.v1.OliveTinApiService/ValidateArgumentType"
	// OliveTinApiServiceWhoAmIProcedure is the fully-qualified name of the OliveTinApiService's WhoAmI
	// RPC.
	OliveTinApiServiceWhoAmIProcedure = "/olivetin.api.v1.OliveTinApiService/WhoAmI"
	// OliveTinApiServiceSosReportProcedure is the fully-qualified name of the OliveTinApiService's
	// SosReport RPC.
	OliveTinApiServiceSosReportProcedure = "/olivetin.api.v1.OliveTinApiService/SosReport"
	// OliveTinApiServiceDumpVarsProcedure is the fully-qualified name of the OliveTinApiService's
	// DumpVars RPC.
	OliveTinApiServiceDumpVarsProcedure = "/olivetin.api.v1.OliveTinApiService/DumpVars"
	// OliveTinApiServiceDumpPublicIdActionMapProcedure is the fully-qualified name of the
	// OliveTinApiService's DumpPublicIdActionMap RPC.
	OliveTinApiServiceDumpPublicIdActionMapProcedure = "/olivetin.api.v1.OliveTinApiService/DumpPublicIdActionMap"
	// OliveTinApiServiceGetReadyzProcedure is the fully-qualified name of the OliveTinApiService's
	// GetReadyz RPC.
	OliveTinApiServiceGetReadyzProcedure = "/olivetin.api.v1.OliveTinApiService/GetReadyz"
	// OliveTinApiServiceLocalUserLoginProcedure is the fully-qualified name of the OliveTinApiService's
	// LocalUserLogin RPC.
	OliveTinApiServiceLocalUserLoginProcedure = "/olivetin.api.v1.OliveTinApiService/LocalUserLogin"
	// OliveTinApiServicePasswordHashProcedure is the fully-qualified name of the OliveTinApiService's
	// PasswordHash RPC.
	OliveTinApiServicePasswordHashProcedure = "/olivetin.api.v1.OliveTinApiService/PasswordHash"
	// OliveTinApiServiceLogoutProcedure is the fully-qualified name of the OliveTinApiService's Logout
	// RPC.
	OliveTinApiServiceLogoutProcedure = "/olivetin.api.v1.OliveTinApiService/Logout"
	// OliveTinApiServiceEventStreamProcedure is the fully-qualified name of the OliveTinApiService's
	// EventStream RPC.
	OliveTinApiServiceEventStreamProcedure = "/olivetin.api.v1.OliveTinApiService/EventStream"
	// OliveTinApiServiceGetDiagnosticsProcedure is the fully-qualified name of the OliveTinApiService's
	// GetDiagnostics RPC.
	OliveTinApiServiceGetDiagnosticsProcedure = "/olivetin.api.v1.OliveTinApiService/GetDiagnostics"
	// OliveTinApiServiceInitProcedure is the fully-qualified name of the OliveTinApiService's Init RPC.
	OliveTinApiServiceInitProcedure = "/olivetin.api.v1.OliveTinApiService/Init"
	// OliveTinApiServiceGetActionBindingProcedure is the fully-qualified name of the
	// OliveTinApiService's GetActionBinding RPC.
	OliveTinApiServiceGetActionBindingProcedure = "/olivetin.api.v1.OliveTinApiService/GetActionBinding"
	// OliveTinApiServiceGetEntitiesProcedure is the fully-qualified name of the OliveTinApiService's
	// GetEntities RPC.
	OliveTinApiServiceGetEntitiesProcedure = "/olivetin.api.v1.OliveTinApiService/GetEntities"
	// OliveTinApiServiceGetEntityProcedure is the fully-qualified name of the OliveTinApiService's
	// GetEntity RPC.
	OliveTinApiServiceGetEntityProcedure = "/olivetin.api.v1.OliveTinApiService/GetEntity"
)

// OliveTinApiServiceClient is a client for the olivetin.api.v1.OliveTinApiService service.
type OliveTinApiServiceClient interface {
	GetDashboard(context.Context, *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error)
	StartAction(context.Context, *connect.Request[v1.StartActionRequest]) (*connect.Response[v1.StartActionResponse], error)
	StartActionAndWait(context.Context, *connect.Request[v1.StartActionAndWaitRequest]) (*connect.Response[v1.StartActionAndWaitResponse], error)
	StartActionByGet(context.Context, *connect.Request[v1.StartActionByGetRequest]) (*connect.Response[v1.StartActionByGetResponse], error)
	StartActionByGetAndWait(context.Context, *connect.Request[v1.StartActionByGetAndWaitRequest]) (*connect.Response[v1.StartActionByGetAndWaitResponse], error)
	RestartAction(context.Context, *connect.Request[v1.RestartActionRequest]) (*connect.Response[v1.StartActionResponse], error)
	KillAction(context.Context, *connect.Request[v1.KillActionRequest]) (*connect.Response[v1.KillActionResponse], error)
	ExecutionStatus(context.Context, *connect.Request[v1.ExecutionStatusRequest]) (*connect.Response[v1.ExecutionStatusResponse], error)
	GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error)
	ValidateArgumentType(context.Context, *connect.Request[v1.ValidateArgumentTypeRequest]) (*connect.Response[v1.ValidateArgumentTypeResponse], error)
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
	SosReport(context.Context, *connect.Request[v1.SosReportRequest]) (*connect.Response[v1.SosReportResponse], error)
	DumpVars(context.Context, *connect.Request[v1.DumpVarsRequest]) (*connect.Response[v1.DumpVarsResponse], error)
	DumpPublicIdActionMap(context.Context, *connect.Request[v1.DumpPublicIdActionMapRequest]) (*connect.Response[v1.DumpPublicIdActionMapResponse], error)
	GetReadyz(context.Context, *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error)
	LocalUserLogin(context.Context, *connect.Request[v1.LocalUserLoginRequest]) (*connect.Response[v1.LocalUserLoginResponse], error)
	PasswordHash(context.Context, *connect.Request[v1.PasswordHashRequest]) (*connect.Response[v1.PasswordHashResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	EventStream(context.Context, *connect.Request[v1.EventStreamRequest]) (*connect.ServerStreamForClient[v1.EventStreamResponse], error)
	GetDiagnostics(context.Context, *connect.Request[v1.GetDiagnosticsRequest]) (*connect.Response[v1.GetDiagnosticsResponse], error)
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
	GetActionBinding(context.Context, *connect.Request[v1.GetActionBindingRequest]) (*connect.Response[v1.GetActionBindingResponse], error)
	GetEntities(context.Context, *connect.Request[v1.GetEntitiesRequest]) (*connect.Response[v1.GetEntitiesResponse], error)
	GetEntity(context.Context, *connect.Request[v1.GetEntityRequest]) (*connect.Response[v1.Entity], error)
}

// NewOliveTinApiServiceClient constructs a client for the olivetin.api.v1.OliveTinApiService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOliveTinApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OliveTinApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	oliveTinApiServiceMethods := v1.File_olivetin_api_v1_olivetin_proto.Services().ByName("OliveTinApiService").Methods()
	return &oliveTinApiServiceClient{
		getDashboard: connect.NewClient[v1.GetDashboardRequest, v1.GetDashboardResponse](
			httpClient,
			baseURL+OliveTinApiServiceGetDashboardProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetDashboard")),
			connect.WithClientOptions(opts...),
		),
		startAction: connect.NewClient[v1.StartActionRequest, v1.StartActionResponse](
			httpClient,
			baseURL+OliveTinApiServiceStartActionProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("StartAction")),
			connect.WithClientOptions(opts...),
		),
		startActionAndWait: connect.NewClient[v1.StartActionAndWaitRequest, v1.StartActionAndWaitResponse](
			httpClient,
			baseURL+OliveTinApiServiceStartActionAndWaitProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("StartActionAndWait")),
			connect.WithClientOptions(opts...),
		),
		startActionByGet: connect.NewClient[v1.StartActionByGetRequest, v1.StartActionByGetResponse](
			httpClient,
			baseURL+OliveTinApiServiceStartActionByGetProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("StartActionByGet")),
			connect.WithClientOptions(opts...),
		),
		startActionByGetAndWait: connect.NewClient[v1.StartActionByGetAndWaitRequest, v1.StartActionByGetAndWaitResponse](
			httpClient,
			baseURL+OliveTinApiServiceStartActionByGetAndWaitProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("StartActionByGetAndWait")),
			connect.WithClientOptions(opts...),
		),
		restartAction: connect.NewClient[v1.RestartActionRequest, v1.StartActionResponse](
			httpClient,
			baseURL+OliveTinApiServiceRestartActionProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("RestartAction")),
			connect.WithClientOptions(opts...),
		),
		killAction: connect.NewClient[v1.KillActionRequest, v1.KillActionResponse](
			httpClient,
			baseURL+OliveTinApiServiceKillActionProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("KillAction")),
			connect.WithClientOptions(opts...),
		),
		executionStatus: connect.NewClient[v1.ExecutionStatusRequest, v1.ExecutionStatusResponse](
			httpClient,
			baseURL+OliveTinApiServiceExecutionStatusProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("ExecutionStatus")),
			connect.WithClientOptions(opts...),
		),
		getLogs: connect.NewClient[v1.GetLogsRequest, v1.GetLogsResponse](
			httpClient,
			baseURL+OliveTinApiServiceGetLogsProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetLogs")),
			connect.WithClientOptions(opts...),
		),
		validateArgumentType: connect.NewClient[v1.ValidateArgumentTypeRequest, v1.ValidateArgumentTypeResponse](
			httpClient,
			baseURL+OliveTinApiServiceValidateArgumentTypeProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("ValidateArgumentType")),
			connect.WithClientOptions(opts...),
		),
		whoAmI: connect.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+OliveTinApiServiceWhoAmIProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("WhoAmI")),
			connect.WithClientOptions(opts...),
		),
		sosReport: connect.NewClient[v1.SosReportRequest, v1.SosReportResponse](
			httpClient,
			baseURL+OliveTinApiServiceSosReportProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("SosReport")),
			connect.WithClientOptions(opts...),
		),
		dumpVars: connect.NewClient[v1.DumpVarsRequest, v1.DumpVarsResponse](
			httpClient,
			baseURL+OliveTinApiServiceDumpVarsProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("DumpVars")),
			connect.WithClientOptions(opts...),
		),
		dumpPublicIdActionMap: connect.NewClient[v1.DumpPublicIdActionMapRequest, v1.DumpPublicIdActionMapResponse](
			httpClient,
			baseURL+OliveTinApiServiceDumpPublicIdActionMapProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("DumpPublicIdActionMap")),
			connect.WithClientOptions(opts...),
		),
		getReadyz: connect.NewClient[v1.GetReadyzRequest, v1.GetReadyzResponse](
			httpClient,
			baseURL+OliveTinApiServiceGetReadyzProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetReadyz")),
			connect.WithClientOptions(opts...),
		),
		localUserLogin: connect.NewClient[v1.LocalUserLoginRequest, v1.LocalUserLoginResponse](
			httpClient,
			baseURL+OliveTinApiServiceLocalUserLoginProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("LocalUserLogin")),
			connect.WithClientOptions(opts...),
		),
		passwordHash: connect.NewClient[v1.PasswordHashRequest, v1.PasswordHashResponse](
			httpClient,
			baseURL+OliveTinApiServicePasswordHashProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("PasswordHash")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+OliveTinApiServiceLogoutProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		eventStream: connect.NewClient[v1.EventStreamRequest, v1.EventStreamResponse](
			httpClient,
			baseURL+OliveTinApiServiceEventStreamProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("EventStream")),
			connect.WithClientOptions(opts...),
		),
		getDiagnostics: connect.NewClient[v1.GetDiagnosticsRequest, v1.GetDiagnosticsResponse](
			httpClient,
			baseURL+OliveTinApiServiceGetDiagnosticsProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetDiagnostics")),
			connect.WithClientOptions(opts...),
		),
		init: connect.NewClient[v1.InitRequest, v1.InitResponse](
			httpClient,
			baseURL+OliveTinApiServiceInitProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("Init")),
			connect.WithClientOptions(opts...),
		),
		getActionBinding: connect.NewClient[v1.GetActionBindingRequest, v1.GetActionBindingResponse](
			httpClient,
			baseURL+OliveTinApiServiceGetActionBindingProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetActionBinding")),
			connect.WithClientOptions(opts...),
		),
		getEntities: connect.NewClient[v1.GetEntitiesRequest, v1.GetEntitiesResponse](
			httpClient,
			baseURL+OliveTinApiServiceGetEntitiesProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetEntities")),
			connect.WithClientOptions(opts...),
		),
		getEntity: connect.NewClient[v1.GetEntityRequest, v1.Entity](
			httpClient,
			baseURL+OliveTinApiServiceGetEntityProcedure,
			connect.WithSchema(oliveTinApiServiceMethods.ByName("GetEntity")),
			connect.WithClientOptions(opts...),
		),
	}
}

// oliveTinApiServiceClient implements OliveTinApiServiceClient.
type oliveTinApiServiceClient struct {
	getDashboard            *connect.Client[v1.GetDashboardRequest, v1.GetDashboardResponse]
	startAction             *connect.Client[v1.StartActionRequest, v1.StartActionResponse]
	startActionAndWait      *connect.Client[v1.StartActionAndWaitRequest, v1.StartActionAndWaitResponse]
	startActionByGet        *connect.Client[v1.StartActionByGetRequest, v1.StartActionByGetResponse]
	startActionByGetAndWait *connect.Client[v1.StartActionByGetAndWaitRequest, v1.StartActionByGetAndWaitResponse]
	restartAction           *connect.Client[v1.RestartActionRequest, v1.StartActionResponse]
	killAction              *connect.Client[v1.KillActionRequest, v1.KillActionResponse]
	executionStatus         *connect.Client[v1.ExecutionStatusRequest, v1.ExecutionStatusResponse]
	getLogs                 *connect.Client[v1.GetLogsRequest, v1.GetLogsResponse]
	validateArgumentType    *connect.Client[v1.ValidateArgumentTypeRequest, v1.ValidateArgumentTypeResponse]
	whoAmI                  *connect.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
	sosReport               *connect.Client[v1.SosReportRequest, v1.SosReportResponse]
	dumpVars                *connect.Client[v1.DumpVarsRequest, v1.DumpVarsResponse]
	dumpPublicIdActionMap   *connect.Client[v1.DumpPublicIdActionMapRequest, v1.DumpPublicIdActionMapResponse]
	getReadyz               *connect.Client[v1.GetReadyzRequest, v1.GetReadyzResponse]
	localUserLogin          *connect.Client[v1.LocalUserLoginRequest, v1.LocalUserLoginResponse]
	passwordHash            *connect.Client[v1.PasswordHashRequest, v1.PasswordHashResponse]
	logout                  *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	eventStream             *connect.Client[v1.EventStreamRequest, v1.EventStreamResponse]
	getDiagnostics          *connect.Client[v1.GetDiagnosticsRequest, v1.GetDiagnosticsResponse]
	init                    *connect.Client[v1.InitRequest, v1.InitResponse]
	getActionBinding        *connect.Client[v1.GetActionBindingRequest, v1.GetActionBindingResponse]
	getEntities             *connect.Client[v1.GetEntitiesRequest, v1.GetEntitiesResponse]
	getEntity               *connect.Client[v1.GetEntityRequest, v1.Entity]
}

// GetDashboard calls olivetin.api.v1.OliveTinApiService.GetDashboard.
func (c *oliveTinApiServiceClient) GetDashboard(ctx context.Context, req *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error) {
	return c.getDashboard.CallUnary(ctx, req)
}

// StartAction calls olivetin.api.v1.OliveTinApiService.StartAction.
func (c *oliveTinApiServiceClient) StartAction(ctx context.Context, req *connect.Request[v1.StartActionRequest]) (*connect.Response[v1.StartActionResponse], error) {
	return c.startAction.CallUnary(ctx, req)
}

// StartActionAndWait calls olivetin.api.v1.OliveTinApiService.StartActionAndWait.
func (c *oliveTinApiServiceClient) StartActionAndWait(ctx context.Context, req *connect.Request[v1.StartActionAndWaitRequest]) (*connect.Response[v1.StartActionAndWaitResponse], error) {
	return c.startActionAndWait.CallUnary(ctx, req)
}

// StartActionByGet calls olivetin.api.v1.OliveTinApiService.StartActionByGet.
func (c *oliveTinApiServiceClient) StartActionByGet(ctx context.Context, req *connect.Request[v1.StartActionByGetRequest]) (*connect.Response[v1.StartActionByGetResponse], error) {
	return c.startActionByGet.CallUnary(ctx, req)
}

// StartActionByGetAndWait calls olivetin.api.v1.OliveTinApiService.StartActionByGetAndWait.
func (c *oliveTinApiServiceClient) StartActionByGetAndWait(ctx context.Context, req *connect.Request[v1.StartActionByGetAndWaitRequest]) (*connect.Response[v1.StartActionByGetAndWaitResponse], error) {
	return c.startActionByGetAndWait.CallUnary(ctx, req)
}

// RestartAction calls olivetin.api.v1.OliveTinApiService.RestartAction.
func (c *oliveTinApiServiceClient) RestartAction(ctx context.Context, req *connect.Request[v1.RestartActionRequest]) (*connect.Response[v1.StartActionResponse], error) {
	return c.restartAction.CallUnary(ctx, req)
}

// KillAction calls olivetin.api.v1.OliveTinApiService.KillAction.
func (c *oliveTinApiServiceClient) KillAction(ctx context.Context, req *connect.Request[v1.KillActionRequest]) (*connect.Response[v1.KillActionResponse], error) {
	return c.killAction.CallUnary(ctx, req)
}

// ExecutionStatus calls olivetin.api.v1.OliveTinApiService.ExecutionStatus.
func (c *oliveTinApiServiceClient) ExecutionStatus(ctx context.Context, req *connect.Request[v1.ExecutionStatusRequest]) (*connect.Response[v1.ExecutionStatusResponse], error) {
	return c.executionStatus.CallUnary(ctx, req)
}

// GetLogs calls olivetin.api.v1.OliveTinApiService.GetLogs.
func (c *oliveTinApiServiceClient) GetLogs(ctx context.Context, req *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error) {
	return c.getLogs.CallUnary(ctx, req)
}

// ValidateArgumentType calls olivetin.api.v1.OliveTinApiService.ValidateArgumentType.
func (c *oliveTinApiServiceClient) ValidateArgumentType(ctx context.Context, req *connect.Request[v1.ValidateArgumentTypeRequest]) (*connect.Response[v1.ValidateArgumentTypeResponse], error) {
	return c.validateArgumentType.CallUnary(ctx, req)
}

// WhoAmI calls olivetin.api.v1.OliveTinApiService.WhoAmI.
func (c *oliveTinApiServiceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// SosReport calls olivetin.api.v1.OliveTinApiService.SosReport.
func (c *oliveTinApiServiceClient) SosReport(ctx context.Context, req *connect.Request[v1.SosReportRequest]) (*connect.Response[v1.SosReportResponse], error) {
	return c.sosReport.CallUnary(ctx, req)
}

// DumpVars calls olivetin.api.v1.OliveTinApiService.DumpVars.
func (c *oliveTinApiServiceClient) DumpVars(ctx context.Context, req *connect.Request[v1.DumpVarsRequest]) (*connect.Response[v1.DumpVarsResponse], error) {
	return c.dumpVars.CallUnary(ctx, req)
}

// DumpPublicIdActionMap calls olivetin.api.v1.OliveTinApiService.DumpPublicIdActionMap.
func (c *oliveTinApiServiceClient) DumpPublicIdActionMap(ctx context.Context, req *connect.Request[v1.DumpPublicIdActionMapRequest]) (*connect.Response[v1.DumpPublicIdActionMapResponse], error) {
	return c.dumpPublicIdActionMap.CallUnary(ctx, req)
}

// GetReadyz calls olivetin.api.v1.OliveTinApiService.GetReadyz.
func (c *oliveTinApiServiceClient) GetReadyz(ctx context.Context, req *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error) {
	return c.getReadyz.CallUnary(ctx, req)
}

// LocalUserLogin calls olivetin.api.v1.OliveTinApiService.LocalUserLogin.
func (c *oliveTinApiServiceClient) LocalUserLogin(ctx context.Context, req *connect.Request[v1.LocalUserLoginRequest]) (*connect.Response[v1.LocalUserLoginResponse], error) {
	return c.localUserLogin.CallUnary(ctx, req)
}

// PasswordHash calls olivetin.api.v1.OliveTinApiService.PasswordHash.
func (c *oliveTinApiServiceClient) PasswordHash(ctx context.Context, req *connect.Request[v1.PasswordHashRequest]) (*connect.Response[v1.PasswordHashResponse], error) {
	return c.passwordHash.CallUnary(ctx, req)
}

// Logout calls olivetin.api.v1.OliveTinApiService.Logout.
func (c *oliveTinApiServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// EventStream calls olivetin.api.v1.OliveTinApiService.EventStream.
func (c *oliveTinApiServiceClient) EventStream(ctx context.Context, req *connect.Request[v1.EventStreamRequest]) (*connect.ServerStreamForClient[v1.EventStreamResponse], error) {
	return c.eventStream.CallServerStream(ctx, req)
}

// GetDiagnostics calls olivetin.api.v1.OliveTinApiService.GetDiagnostics.
func (c *oliveTinApiServiceClient) GetDiagnostics(ctx context.Context, req *connect.Request[v1.GetDiagnosticsRequest]) (*connect.Response[v1.GetDiagnosticsResponse], error) {
	return c.getDiagnostics.CallUnary(ctx, req)
}

// Init calls olivetin.api.v1.OliveTinApiService.Init.
func (c *oliveTinApiServiceClient) Init(ctx context.Context, req *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// GetActionBinding calls olivetin.api.v1.OliveTinApiService.GetActionBinding.
func (c *oliveTinApiServiceClient) GetActionBinding(ctx context.Context, req *connect.Request[v1.GetActionBindingRequest]) (*connect.Response[v1.GetActionBindingResponse], error) {
	return c.getActionBinding.CallUnary(ctx, req)
}

// GetEntities calls olivetin.api.v1.OliveTinApiService.GetEntities.
func (c *oliveTinApiServiceClient) GetEntities(ctx context.Context, req *connect.Request[v1.GetEntitiesRequest]) (*connect.Response[v1.GetEntitiesResponse], error) {
	return c.getEntities.CallUnary(ctx, req)
}

// GetEntity calls olivetin.api.v1.OliveTinApiService.GetEntity.
func (c *oliveTinApiServiceClient) GetEntity(ctx context.Context, req *connect.Request[v1.GetEntityRequest]) (*connect.Response[v1.Entity], error) {
	return c.getEntity.CallUnary(ctx, req)
}

// OliveTinApiServiceHandler is an implementation of the olivetin.api.v1.OliveTinApiService service.
type OliveTinApiServiceHandler interface {
	GetDashboard(context.Context, *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error)
	StartAction(context.Context, *connect.Request[v1.StartActionRequest]) (*connect.Response[v1.StartActionResponse], error)
	StartActionAndWait(context.Context, *connect.Request[v1.StartActionAndWaitRequest]) (*connect.Response[v1.StartActionAndWaitResponse], error)
	StartActionByGet(context.Context, *connect.Request[v1.StartActionByGetRequest]) (*connect.Response[v1.StartActionByGetResponse], error)
	StartActionByGetAndWait(context.Context, *connect.Request[v1.StartActionByGetAndWaitRequest]) (*connect.Response[v1.StartActionByGetAndWaitResponse], error)
	RestartAction(context.Context, *connect.Request[v1.RestartActionRequest]) (*connect.Response[v1.StartActionResponse], error)
	KillAction(context.Context, *connect.Request[v1.KillActionRequest]) (*connect.Response[v1.KillActionResponse], error)
	ExecutionStatus(context.Context, *connect.Request[v1.ExecutionStatusRequest]) (*connect.Response[v1.ExecutionStatusResponse], error)
	GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error)
	ValidateArgumentType(context.Context, *connect.Request[v1.ValidateArgumentTypeRequest]) (*connect.Response[v1.ValidateArgumentTypeResponse], error)
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
	SosReport(context.Context, *connect.Request[v1.SosReportRequest]) (*connect.Response[v1.SosReportResponse], error)
	DumpVars(context.Context, *connect.Request[v1.DumpVarsRequest]) (*connect.Response[v1.DumpVarsResponse], error)
	DumpPublicIdActionMap(context.Context, *connect.Request[v1.DumpPublicIdActionMapRequest]) (*connect.Response[v1.DumpPublicIdActionMapResponse], error)
	GetReadyz(context.Context, *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error)
	LocalUserLogin(context.Context, *connect.Request[v1.LocalUserLoginRequest]) (*connect.Response[v1.LocalUserLoginResponse], error)
	PasswordHash(context.Context, *connect.Request[v1.PasswordHashRequest]) (*connect.Response[v1.PasswordHashResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	EventStream(context.Context, *connect.Request[v1.EventStreamRequest], *connect.ServerStream[v1.EventStreamResponse]) error
	GetDiagnostics(context.Context, *connect.Request[v1.GetDiagnosticsRequest]) (*connect.Response[v1.GetDiagnosticsResponse], error)
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
	GetActionBinding(context.Context, *connect.Request[v1.GetActionBindingRequest]) (*connect.Response[v1.GetActionBindingResponse], error)
	GetEntities(context.Context, *connect.Request[v1.GetEntitiesRequest]) (*connect.Response[v1.GetEntitiesResponse], error)
	GetEntity(context.Context, *connect.Request[v1.GetEntityRequest]) (*connect.Response[v1.Entity], error)
}

// NewOliveTinApiServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOliveTinApiServiceHandler(svc OliveTinApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	oliveTinApiServiceMethods := v1.File_olivetin_api_v1_olivetin_proto.Services().ByName("OliveTinApiService").Methods()
	oliveTinApiServiceGetDashboardHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetDashboardProcedure,
		svc.GetDashboard,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceStartActionHandler := connect.NewUnaryHandler(
		OliveTinApiServiceStartActionProcedure,
		svc.StartAction,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("StartAction")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceStartActionAndWaitHandler := connect.NewUnaryHandler(
		OliveTinApiServiceStartActionAndWaitProcedure,
		svc.StartActionAndWait,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("StartActionAndWait")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceStartActionByGetHandler := connect.NewUnaryHandler(
		OliveTinApiServiceStartActionByGetProcedure,
		svc.StartActionByGet,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("StartActionByGet")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceStartActionByGetAndWaitHandler := connect.NewUnaryHandler(
		OliveTinApiServiceStartActionByGetAndWaitProcedure,
		svc.StartActionByGetAndWait,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("StartActionByGetAndWait")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceRestartActionHandler := connect.NewUnaryHandler(
		OliveTinApiServiceRestartActionProcedure,
		svc.RestartAction,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("RestartAction")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceKillActionHandler := connect.NewUnaryHandler(
		OliveTinApiServiceKillActionProcedure,
		svc.KillAction,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("KillAction")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceExecutionStatusHandler := connect.NewUnaryHandler(
		OliveTinApiServiceExecutionStatusProcedure,
		svc.ExecutionStatus,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("ExecutionStatus")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceGetLogsHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetLogsProcedure,
		svc.GetLogs,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetLogs")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceValidateArgumentTypeHandler := connect.NewUnaryHandler(
		OliveTinApiServiceValidateArgumentTypeProcedure,
		svc.ValidateArgumentType,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("ValidateArgumentType")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceWhoAmIHandler := connect.NewUnaryHandler(
		OliveTinApiServiceWhoAmIProcedure,
		svc.WhoAmI,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("WhoAmI")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceSosReportHandler := connect.NewUnaryHandler(
		OliveTinApiServiceSosReportProcedure,
		svc.SosReport,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("SosReport")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceDumpVarsHandler := connect.NewUnaryHandler(
		OliveTinApiServiceDumpVarsProcedure,
		svc.DumpVars,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("DumpVars")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceDumpPublicIdActionMapHandler := connect.NewUnaryHandler(
		OliveTinApiServiceDumpPublicIdActionMapProcedure,
		svc.DumpPublicIdActionMap,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("DumpPublicIdActionMap")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceGetReadyzHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetReadyzProcedure,
		svc.GetReadyz,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetReadyz")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceLocalUserLoginHandler := connect.NewUnaryHandler(
		OliveTinApiServiceLocalUserLoginProcedure,
		svc.LocalUserLogin,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("LocalUserLogin")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServicePasswordHashHandler := connect.NewUnaryHandler(
		OliveTinApiServicePasswordHashProcedure,
		svc.PasswordHash,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("PasswordHash")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceLogoutHandler := connect.NewUnaryHandler(
		OliveTinApiServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceEventStreamHandler := connect.NewServerStreamHandler(
		OliveTinApiServiceEventStreamProcedure,
		svc.EventStream,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("EventStream")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceGetDiagnosticsHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetDiagnosticsProcedure,
		svc.GetDiagnostics,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetDiagnostics")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceInitHandler := connect.NewUnaryHandler(
		OliveTinApiServiceInitProcedure,
		svc.Init,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("Init")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceGetActionBindingHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetActionBindingProcedure,
		svc.GetActionBinding,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetActionBinding")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceGetEntitiesHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetEntitiesProcedure,
		svc.GetEntities,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetEntities")),
		connect.WithHandlerOptions(opts...),
	)
	oliveTinApiServiceGetEntityHandler := connect.NewUnaryHandler(
		OliveTinApiServiceGetEntityProcedure,
		svc.GetEntity,
		connect.WithSchema(oliveTinApiServiceMethods.ByName("GetEntity")),
		connect.WithHandlerOptions(opts...),
	)
	return "/olivetin.api.v1.OliveTinApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OliveTinApiServiceGetDashboardProcedure:
			oliveTinApiServiceGetDashboardHandler.ServeHTTP(w, r)
		case OliveTinApiServiceStartActionProcedure:
			oliveTinApiServiceStartActionHandler.ServeHTTP(w, r)
		case OliveTinApiServiceStartActionAndWaitProcedure:
			oliveTinApiServiceStartActionAndWaitHandler.ServeHTTP(w, r)
		case OliveTinApiServiceStartActionByGetProcedure:
			oliveTinApiServiceStartActionByGetHandler.ServeHTTP(w, r)
		case OliveTinApiServiceStartActionByGetAndWaitProcedure:
			oliveTinApiServiceStartActionByGetAndWaitHandler.ServeHTTP(w, r)
		case OliveTinApiServiceRestartActionProcedure:
			oliveTinApiServiceRestartActionHandler.ServeHTTP(w, r)
		case OliveTinApiServiceKillActionProcedure:
			oliveTinApiServiceKillActionHandler.ServeHTTP(w, r)
		case OliveTinApiServiceExecutionStatusProcedure:
			oliveTinApiServiceExecutionStatusHandler.ServeHTTP(w, r)
		case OliveTinApiServiceGetLogsProcedure:
			oliveTinApiServiceGetLogsHandler.ServeHTTP(w, r)
		case OliveTinApiServiceValidateArgumentTypeProcedure:
			oliveTinApiServiceValidateArgumentTypeHandler.ServeHTTP(w, r)
		case OliveTinApiServiceWhoAmIProcedure:
			oliveTinApiServiceWhoAmIHandler.ServeHTTP(w, r)
		case OliveTinApiServiceSosReportProcedure:
			oliveTinApiServiceSosReportHandler.ServeHTTP(w, r)
		case OliveTinApiServiceDumpVarsProcedure:
			oliveTinApiServiceDumpVarsHandler.ServeHTTP(w, r)
		case OliveTinApiServiceDumpPublicIdActionMapProcedure:
			oliveTinApiServiceDumpPublicIdActionMapHandler.ServeHTTP(w, r)
		case OliveTinApiServiceGetReadyzProcedure:
			oliveTinApiServiceGetReadyzHandler.ServeHTTP(w, r)
		case OliveTinApiServiceLocalUserLoginProcedure:
			oliveTinApiServiceLocalUserLoginHandler.ServeHTTP(w, r)
		case OliveTinApiServicePasswordHashProcedure:
			oliveTinApiServicePasswordHashHandler.ServeHTTP(w, r)
		case OliveTinApiServiceLogoutProcedure:
			oliveTinApiServiceLogoutHandler.ServeHTTP(w, r)
		case OliveTinApiServiceEventStreamProcedure:
			oliveTinApiServiceEventStreamHandler.ServeHTTP(w, r)
		case OliveTinApiServiceGetDiagnosticsProcedure:
			oliveTinApiServiceGetDiagnosticsHandler.ServeHTTP(w, r)
		case OliveTinApiServiceInitProcedure:
			oliveTinApiServiceInitHandler.ServeHTTP(w, r)
		case OliveTinApiServiceGetActionBindingProcedure:
			oliveTinApiServiceGetActionBindingHandler.ServeHTTP(w, r)
		case OliveTinApiServiceGetEntitiesProcedure:
			oliveTinApiServiceGetEntitiesHandler.ServeHTTP(w, r)
		case OliveTinApiServiceGetEntityProcedure:
			oliveTinApiServiceGetEntityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOliveTinApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOliveTinApiServiceHandler struct{}

func (UnimplementedOliveTinApiServiceHandler) GetDashboard(context.Context, *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetDashboard is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) StartAction(context.Context, *connect.Request[v1.StartActionRequest]) (*connect.Response[v1.StartActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.StartAction is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) StartActionAndWait(context.Context, *connect.Request[v1.StartActionAndWaitRequest]) (*connect.Response[v1.StartActionAndWaitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.StartActionAndWait is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) StartActionByGet(context.Context, *connect.Request[v1.StartActionByGetRequest]) (*connect.Response[v1.StartActionByGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.StartActionByGet is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) StartActionByGetAndWait(context.Context, *connect.Request[v1.StartActionByGetAndWaitRequest]) (*connect.Response[v1.StartActionByGetAndWaitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.StartActionByGetAndWait is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) RestartAction(context.Context, *connect.Request[v1.RestartActionRequest]) (*connect.Response[v1.StartActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.RestartAction is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) KillAction(context.Context, *connect.Request[v1.KillActionRequest]) (*connect.Response[v1.KillActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.KillAction is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) ExecutionStatus(context.Context, *connect.Request[v1.ExecutionStatusRequest]) (*connect.Response[v1.ExecutionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.ExecutionStatus is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetLogs is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) ValidateArgumentType(context.Context, *connect.Request[v1.ValidateArgumentTypeRequest]) (*connect.Response[v1.ValidateArgumentTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.ValidateArgumentType is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.WhoAmI is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) SosReport(context.Context, *connect.Request[v1.SosReportRequest]) (*connect.Response[v1.SosReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.SosReport is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) DumpVars(context.Context, *connect.Request[v1.DumpVarsRequest]) (*connect.Response[v1.DumpVarsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.DumpVars is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) DumpPublicIdActionMap(context.Context, *connect.Request[v1.DumpPublicIdActionMapRequest]) (*connect.Response[v1.DumpPublicIdActionMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.DumpPublicIdActionMap is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) GetReadyz(context.Context, *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetReadyz is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) LocalUserLogin(context.Context, *connect.Request[v1.LocalUserLoginRequest]) (*connect.Response[v1.LocalUserLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.LocalUserLogin is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) PasswordHash(context.Context, *connect.Request[v1.PasswordHashRequest]) (*connect.Response[v1.PasswordHashResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.PasswordHash is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.Logout is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) EventStream(context.Context, *connect.Request[v1.EventStreamRequest], *connect.ServerStream[v1.EventStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.EventStream is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) GetDiagnostics(context.Context, *connect.Request[v1.GetDiagnosticsRequest]) (*connect.Response[v1.GetDiagnosticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetDiagnostics is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.Init is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) GetActionBinding(context.Context, *connect.Request[v1.GetActionBindingRequest]) (*connect.Response[v1.GetActionBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetActionBinding is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) GetEntities(context.Context, *connect.Request[v1.GetEntitiesRequest]) (*connect.Response[v1.GetEntitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetEntities is not implemented"))
}

func (UnimplementedOliveTinApiServiceHandler) GetEntity(context.Context, *connect.Request[v1.GetEntityRequest]) (*connect.Response[v1.Entity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("olivetin.api.v1.OliveTinApiService.GetEntity is not implemented"))
}
